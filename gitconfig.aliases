[alias]
  # open config in editor
  ec = config --global -e

  s = status --short --branch
  ci = commit

  # Switch branch
  sw = switch

  # New branch
  nb = switch -c

  # Add any staged changes to previous commit and update commit message
  amend = commit --amend --no-edit

  # Stage all changes and commit, commit message as argument
  cm = !git add -A && git commit -m

  # Reset previous commit but keep changes in working directory
  undo = reset HEAD~1 --mixed

  # Safer push
  pf = push --force-with-lease

  # Diffs
  d = diff
  ds = diff --staged  # Diffs

  # Clearer branch output
  branches = for-each-ref --sort=-committerdate --format=\"%(color:white)%(refname:short)\t%(color:blue)%(authordate:relative)\t%(color:red)%(authorname)\" refs/remotes

  # Initialise with empty commit
  init-empty = !git init && git commit --allow-empty -m \"Initial commit\"

  # update local repository with latest remote changes, rebases and prunes remotes
  up = !git pull --rebase --prune $@ && git submodule update --init --recursive

  # Stage all and commit, useful for preserving WIP if have to change branch
  save = !git add -A && git commit -m 'SAVEPOINT'

  # better reset, checkin all, then step back, keeps changes in savepoint commit
  wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

  # Return branch name, helper for publish
  branch-name = !git rev-parse --abbrev-ref HEAD

  # Adds branch to remote and pushes
	publish = !git push -u origin $(git branch-name)

  # More consise log output, log single, log single graph
  ls = log --oneline --decorate -20
  lsa = log --oneline --decorate
  lsg = log --oneline --decorate --graph --all -20
  lsga = log --oneline --decorate --graph --all

  # Pretty log output
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
